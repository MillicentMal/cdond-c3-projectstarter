version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -k https://kvdb.io/AjrJrGDp9Xbrznw69Cgmg4/migration_<<parameters.workflow_id>>)
            echo "$SUCCESS"
            if [[ "${SUCCESS}" == 1 ]];  
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible 
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
  
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end analyze
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end analyze
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: install dependencies 
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Delete Old Backend Ip Address
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            OLD_BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${OLD_WORKFLOW_ID}" --output text)
            echo $OLD_WORKFLOW_ID
            echo $OLD_BACKEND_IP
            sed -i -e '2d' ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
    # Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
    # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e9:b1:57:fb:59:4d:1a:63:b6:d3:ad:27:ff:d9:0f:26"]
      # attach workspace
      - attach_workspace:
      # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml -vvv
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      

  run-migrations:
    docker:
  # I changed the image from circleci/node:13.8.0. 
  # I had less frustration when using cimg/python:3.10. You just have to install Nodejs manually
      - image: cimg/python:3.10
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
  # Moved awscli and node install to Commands above
    
      - install_awscli
      - install_nodejs
  # attaching workspace so we have access to migrations_dump.txt file later
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to KVDB
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl -k https://kvdb.io/AjrJrGDp9Xbrznw69Cgmg4/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
          # Here's where you will add some code to rollback on failure
      # - revert-migrations # You missed this one 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
    # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.16
    steps:
    # Checkout code from git
      - checkout

      - attach_workspace:
    # Must be absolute path or relative path from working_directory
          at: ~/
   
      - run:
          name: install dependencies
          command: |
            apk add --no-cache aws-cli
            apk add --update npm
            apk add tar
            apk add gzip
      - run:
          name: install ansible
          command: |
            apk add ansible
      - run:
          name: install nodejs
          command: |
            apk add --update nodejs
      - run:
          name: install curl
          command: |
            apk add curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL = "http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
    # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
  #  Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
    # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e9:b1:57:fb:59:4d:1a:63:b6:d3:ad:27:ff:d9:0f:26"]
    #  attach workspace
      - attach_workspace:
    # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Install aws
          command: |
            apk add --no-cache aws-cli
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: install npm
          command: |
            apk add --update npm
      - run:
          name: install nodejs
          command: |
            apk add --update nodejs
      - run:
          name: Deploy backend
          command: |
            cd backend
            echo NODE_ENV=production >> .env 
            echo VERSION=1 >> .env 
            echo TYPEORM_ENTITIES=${TYPEORM_ENTITIES} >> .env 
            echo TYPEORM_HOST=${TYPEORM_HOST} >> .env 
            echo TYPEORM_CONNECTION=${TYPEORM_CONNECTION} >> .env  
            echo TYPEORM_PORT=${TYPEORM_PORT} >> .env 
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> .env 
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> .env 
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> .env 
            echo TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS} >> .env 
            echo TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} >> .env 
            cat .env
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
# # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install curl 
          command: |
            apk add curl
      - run:
          name: install awscli
          command: |
            apk add --no-cache aws-cli

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"

            sleep 2m
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install tar gzip -y
      - run:
          name: Update Cloudfront Distribution
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text  > ~/oldWorkflowId.txt  
            cat ~/oldWorkflowId.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - oldWorkflowId.txt
      - attach_workspace:
          at: ~/
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # Fetch the Old workflow ID
  #           export OldWorkflowID=$(aws cloudformation \
  #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #             --no-paginate --output text)
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
  #           # Fetch the stack names          
  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #           echo Stack names: "${STACKS[@]}"
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           fi
  #     - revert-migrations
  #     - destroy-environment
workflows:
  default:
    jobs:

    - build-frontend
    - build-backend
    - test-frontend:
        requires: [build-frontend]
    - test-backend:
        requires: [build-backend]
    - scan-backend:
        requires: [build-backend]
    - scan-frontend:
        requires: [build-frontend]
    - deploy-infrastructure:
        requires: [test-frontend, test-backend, scan-frontend, scan-backend]
  # filters:
  # branches:
  # only: [test-feature-branch]
    - configure-infrastructure:
        requires: [deploy-infrastructure] 
    - run-migrations:
        requires: [configure-infrastructure]
    - deploy-frontend:
        requires: [run-migrations]
    - deploy-backend:
        requires: [run-migrations]
    - smoke-test:
          requires: [deploy-backend, deploy-frontend]
    - cloudfront-update:
        requires: [smoke-test]